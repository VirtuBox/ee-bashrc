#!/bin/bash
#----------------------------------------------------------------------------
# vbashrc -  bashrc functions and aliases
#----------------------------------------------------------------------------
# Website:       https://virtubox.net
# GitHub:        https://github.com/VirtuBox/vbashrc
# Copyright (c) 2018 VirtuBox <contact@virtubox.net>
# This script is licensed under M.I.T
#---------------------------------------------------------------------------
# Version 1.0 - 2019-19-21
# --------------------------------------------------------------------------

# SUDO check
if [ "$(id -u)" != "0" ]; then
SUDO_CHECK="$(groups | grep sudo)"
if [ -z "$SUDO_CHECK" ]; then
    SUDO=""
    ELEVATION=0
else
    SUDO="sudo"
    ELEVATION=1
fi
else
    SUDO=""
    ELEVATION=1
fi



##################################
# functions
##################################

# Nginx-ee compilation

_NGINX_EE() {
    wget -O $HOME/.vbashrc/scripts/nginx-build.sh https://raw.githubusercontent.com/VirtuBox/nginx-ee/master/nginx-build.sh
    chmod +x $HOME/.vbashrc/scripts/nginx-build.sh
    $SUDO $HOME/.vbashrc/scripts/nginx-build.sh
}

_MAINTENANCE() {

    # Colors
    CSI='\033['
    CEND="${CSI}0m"
    CRED="${CSI}1;31m"
    CGREEN="${CSI}1;32m"

    echo -e "${CGREEN}#############################################${CEND}"
    echo -e '       APT UPDATE               '
    echo -e "${CGREEN}#############################################${CEND}"
    $SUDO apt-get update
    echo -e "${CGREEN}#############################################${CEND}"
    echo -e '       APT FULL-UPGRADE               '
    echo -e "${CGREEN}#############################################${CEND}"
    $SUDO apt-get dist-upgrade -y
    echo -e "${CGREEN}#############################################${CEND}"
    echo -e '       APT-GET AUTOREMOVE              '
    echo -e "${CGREEN}#############################################${CEND}"
    $SUDO apt-get -y --purge autoremove
    echo -e "${CGREEN}#############################################${CEND}"
    echo -e '       APT AUTOCLEAN               '
    echo -e "${CGREEN}#############################################${CEND}"
    $SUDO apt-get -y autoclean
    $SUDO apt-get -y clean
    ## clean packages in deinstall state
    DEINSTALLED=$($SUDO dpkg --get-selections | grep deinstall | cut -f1)
    if [ -n "$DEINSTALLED" ]; then
        echo -e "${CGREEN}#############################################${CEND}"
        echo -e '       CLEAN DEINSTALL PACKAGES               '
        echo -e "${CGREEN}#############################################${CEND}"
        $SUDO dpkg --get-selections | grep deinstall | cut -f1 | xargs dpkg --purge
    fi
    if [ -n "$(command -v docker)" ]; then
        echo -e "${CGREEN}#############################################${CEND}"
        echo -e '       DOCKER CLEANUP               '
        echo -e "${CGREEN}#############################################${CEND}"
        list_images=$(docker images --filter "dangling=true" -q --no-trunc)
        list_volumes=$(docker volume ls -qf dangling=true)
        if [ -n "$list_images" ]; then
            docker rmi "$list_images"
        fi
        if [ -n "$list_volumes" ]; then
            docker volume rm "$list_volumes"
        fi
    fi
    OLD_LOGS=$($SUDO find /var/log/ -type f -mtime +30 -iname "*.gz")
    if [ -n "$OLD_LOGS" ]; then
        echo -e "${CGREEN}#############################################${CEND}"
        echo -e '       CLEANUP OLD LOGS               '
        echo -e "${CGREEN}#############################################${CEND}"
        $SUDO find /var/log/ -type f -mtime +30 -iname "*.gz" -exec rm '{}' \;
    fi
    echo -e "${CGREEN}#############################################${CEND}"
    echo -e '       WO-BASHRC UPDATE               '
    echo -e "${CGREEN}#############################################${CEND}"
    update_git_vbashrc

}

_syslog() {
    [ -z "$(command -v ccze)" ] && { apt-get install ccze -y > /dev/null 2>&1; }
    $SUDO tail -n 250 /var/log/syslog | ccze -A
}

_docker() {
    [ -z "$(command -v docker)" ] && {
    curl -fsSL get.docker.com -o $HOME/.vbashrc/scripts/get-docker.sh
    chmod +x $HOME/.vbashrc/scripts/get-docker.sh
    $HOME/.vbashrc/scripts/get-docker.sh
    }
}

_mysqltuner() {
    wget -O $HOME/.vbashrc/scripts/mysqltuner.pl https://raw.githubusercontent.com/major/MySQLTuner-perl/master/mysqltuner.pl
    chmod +x $HOME/.vbashrc/scripts/mysqltuner.pl
    $HOME/.vbashrc/scripts/mysqltuner.pl
}

_mysqlcheck() {
    if [ -d /etc/psa ]; then
        MYSQL_PWD=$($SUDO cat /etc/psa/.psa.shadow) mysqlcheck -Aos -uadmin --auto-repair
    else
        mysqlcheck -Aos --auto-repair
    fi
}

_cronjob() {
    $SUDO cat /var/spool/cron/crontabs/*
}

_password() {
    pass=$(date +%s | sha256sum | base64 | head -c 32)
    echo ""
    echo "Password : $pass"
    echo ""
}

_speedtest() {
    wget -O $HOME/.vbashrc/scripts/speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
    chmod +x $HOME/.vbashrc/scripts/speedtest-cli
    $HOME/.vbashrc/scripts/speedtest-cli --share
}

_sysinfo() {
    # Reading out system information...
    # Reading CPU model
    cname=$(awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//')
    # Reading amount of CPU cores
    cores=$(awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo)
    # Reading CPU frequency in MHz
    freq=$(awk -F: ' /cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//')
    # Reading total memory in MB
    tram=$(free -m | awk 'NR==2 {print $2}')
    # Reading Swap in MB
    vram=$(free -m | awk 'NR==4 {print $2}')
    # Reading system uptime
    up=$(uptime | awk '{ $1=$2=$(NF-6)=$(NF-5)=$(NF-4)=$(NF-3)=$(NF-2)=$(NF-1)=$NF=""; print }' | sed 's/^[ \t]*//;s/[ \t]*$//')
    # Reading operating system and version (simple, didn't filter the strings at the end...)
    opsy=$(cat /etc/issue.net | awk 'NR==1 {print}') # Operating System & Version
    arch=$(uname -m)                                 # Architecture
    lbit=$(getconf LONG_BIT)                         # Architecture in Bit
    hn=$(hostname -f)                                # Hostname
    kern=$(uname -r)
    echo ""
    # Output of results
    echo "System Info"
    echo "Server : $hn"
    echo "-----------"
    echo "Processor	: $cname"
    echo "CPU Cores	: $cores"
    echo "Frequency	: $freq MHz"
    echo "Memory		: $tram MB"
    echo "Swap		: $vram MB"
    echo "Uptime		: $up"
    echo "-----------"
    echo "OS		: $opsy"
    echo "Arch		: $arch ($lbit Bit)"
    echo "Kernel		: $kern"
    echo ""
}

_foldersize() {
    du -sh ./* | sort -h
}

_transfer_sh() {
    { /usr/bin/curl --progress-bar --upload-file "$1" https://transfer.sh/"$(basename "$1")" && echo ""; } | tee -a $HOME/.transfer.log && echo ""
}

_compress_pigz() {
    /bin/tar -I pigz -cvf "$1".tar.gz "$1"
}

_decompress_pigz() {
    /bin/tar -I pigz -xvf "$1"
}

_vb_showlog() {
    [ -z "$(command -v ccze)" ] && { apt-get install ccze -y > /dev/null 2>&1; }
    $SUDO tail -n 500 "$1" | ccze -A

}

_disk_benchmark() {
    [ -f ./file_1GB ] && { rm -f file_1GB; }
    dd if=/dev/zero bs=1024 count=1000000 of=file_1GB
    dd if=file_1GB of=/dev/null bs=1024
    rm file_1GB
}


_help() {
    echo "Command-Line tool for Debian/Ubuntu Servers"
    echo "Usage: vbash <command>"
    echo "  Commands:"
    echo "       --nginx-ee ... compile the latest nginx mainline release with nginx-ee bash script"
    echo "       --maintenance ... run apt-get update, apt-get upgrade, apt-get autoclean etc.."
    echo "       --syslog ... show the last 250 lines of syslog"
    echo "       --showlog <file.log> ... display logs with color using ccze"
    echo "       --netdata ... setup netdata monitoring suite"
    echo "       --docker ... setup docker"
    echo "       --mysqltuner ... download and run mysqltuner script"
    echo "       --mysqlcheck ... run mysqlcheck to repair and optimize all MySQL databases"
    echo "       --cronjob ... list all cronjobs"
    echo "       --password ... generate a password"
    echo "       --speedtest ... run a speedtest using speedtest-cli"
    echo "       --sysinfo ... display various informations about the server"
    echo "       --foldersize ... find the biggest folder in a directory"
    echo "       --gpigz <file/folder name> ... compress a file or a folder with tar and multithreaded gzip"
    echo "       --gunpigz <archive> ... decompress a tar.gz archive with pigz"
    echo "       --transfer <file> ... transfer a file from the command line with transfer.sh"
    echo "       --vbashrc-update ... update vbashrc"
    echo "       -h, --help, help ... displays this help information"
    echo ""
    return 0
}

if [ "$#" = "0" ]; then
    _help
    exit 1
else
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --nginx-ee)
                _NGINX_EE
                exit 0
            ;;
           --maintenance)
                _MAINTENANCE
                exit 0
            ;;
            --syslog)
                _syslog
                exit 0
            ;;
            --showlog)
                _wo_showlog "$2"
                exit 0
                shift
            ;;
            --netdata)
                _netdata
                exit 0
            ;;
            --docker)
                _docker
                exit 0
            ;;
            --mysqltuner)
                _mysqltuner
                exit 0
            ;;
            --mysqlcheck)
                _mysqlcheck
                exit 0
            ;;
            --cronjob)
                _cronjob
                exit 0
            ;;
            --password)
                _password
                exit 0
            ;;
            --speedtest)
                _speedtest
                exit 0
            ;;
            --sysinfo)
                _sysinfo
                exit 0
            ;;
            --foldersize)
                _foldersize
                exit 0
            ;;
            --transfer)
                _transfer_sh "$2"
                exit 0
                shift
            ;;
            "-h" | "--help" | "help")
                _help
                exit 1
            ;;
            *) ;;
        esac
        shift
    done
fi
